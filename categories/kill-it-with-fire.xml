<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Superluser (kill it with fire)</title><link>http://rose.github.io/</link><description></description><atom:link rel="self" type="application/rss+xml" href="http://rose.github.io/categories/kill-it-with-fire.xml"></atom:link><language>en</language><lastBuildDate>Mon, 26 May 2014 15:09:38 GMT</lastBuildDate><generator>Nikola &lt;http://getnikola.com/&gt;</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Incremental Complexity</title><link>http://rose.github.io/posts/incremental-complexity/</link><description>&lt;div&gt;&lt;p&gt;A &lt;cite&gt;friend &amp;lt;dpb.bitbucket.org&amp;gt;&lt;/cite&gt; suggested, perhaps facetiously, that I should do a blog post about incrementing variables.  Here it is.&lt;/p&gt;
&lt;p&gt;Let's start at the beginning, with assembly.  x64, being a fairly full-featured language, includes an inc instruction.  But I'm a little uncomfortable with this amount of magic - who knows what the performance implications are? - so we'll do it manually.&lt;/p&gt;
&lt;p&gt;The following code is closed captioned for the assembly impaired.&lt;/p&gt;
&lt;pre class="code nasm literal-block"&gt;
&lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="nv"&gt;_start&lt;/span&gt;

&lt;span class="k"&gt;section&lt;/span&gt; &lt;span class="nv"&gt;.text&lt;/span&gt;

&lt;span class="nl"&gt;_start:&lt;/span&gt;             &lt;span class="c1"&gt;; main() {&lt;/span&gt;
  &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;        &lt;span class="c1"&gt;;   n = 7&lt;/span&gt;
  &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nv"&gt;r13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;      &lt;span class="c1"&gt;;   original = n&lt;/span&gt;
  &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nv"&gt;r14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;        &lt;span class="c1"&gt;;   carry = 1&lt;/span&gt;

  &lt;span class="nl"&gt;loop:&lt;/span&gt;             &lt;span class="c1"&gt;;   do {&lt;/span&gt;
    &lt;span class="nf"&gt;xor&lt;/span&gt; &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;r14&lt;/span&gt;    &lt;span class="c1"&gt;;     n ^= carry&lt;/span&gt;
    &lt;span class="nf"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;r14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;r13&lt;/span&gt;    &lt;span class="c1"&gt;;     carry &amp;amp;= original&lt;/span&gt;
    &lt;span class="nf"&gt;shl&lt;/span&gt; &lt;span class="nv"&gt;r14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;      &lt;span class="c1"&gt;;     carry &amp;lt;&amp;lt;= 1&lt;/span&gt;
    &lt;span class="nf"&gt;jnz&lt;/span&gt;             &lt;span class="c1"&gt;;   } while (carry)&lt;/span&gt;

  &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;       &lt;span class="c1"&gt;;   return(rdi) // rdi is now 8&lt;/span&gt;
  &lt;span class="nf"&gt;syscall&lt;/span&gt;           &lt;span class="c1"&gt;; }&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Now we just have to compile and link the program, run it, and view its exit code in the shell:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;nasm -felf64 -o inc.o inc.asm
&lt;span class="nv"&gt;$ &lt;/span&gt;ld inc.o
&lt;span class="nv"&gt;$ &lt;/span&gt;./a.out
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
8
&lt;/pre&gt;
&lt;p&gt;Obviously this is not as fast as counting on our fingers, but the program can be modified to increment &lt;em&gt;any&lt;/em&gt; number between 0 and 254 inclusive.  I think we all know how challenging it is to get that many fingers together on short notice.&lt;/p&gt;
&lt;p&gt;While this program is sufficient for most of my mathematical needs, there is no denying that it lacks a certain elegance.  Let's see what we can do with this problem in a functional programming language.  My personal favourite is C++ templates.&lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="http://rose.github.io/posts/incremental-complexity/"&gt;Read moreâ€¦&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>assembly</category><category>c++</category><category>kill it with fire</category><guid>http://rose.github.io/posts/incremental-complexity/</guid><pubDate>Mon, 26 May 2014 15:04:02 GMT</pubDate></item></channel></rss>